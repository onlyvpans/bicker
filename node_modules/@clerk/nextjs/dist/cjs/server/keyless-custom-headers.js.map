{"version":3,"sources":["../../../src/server/keyless-custom-headers.ts"],"sourcesContent":["'use server';\n\nimport { headers } from 'next/headers';\n\ninterface MetadataHeaders {\n  nodeVersion?: string;\n  nextVersion?: string;\n  npmConfigUserAgent?: string;\n  userAgent: string;\n  port?: string;\n  host: string;\n  xHost: string;\n  xPort: string;\n  xProtocol: string;\n  xClerkAuthStatus: string;\n  isCI: boolean;\n}\n\n/**\n * Collects metadata from the environment and request headers\n */\nexport async function collectKeylessMetadata(): Promise<MetadataHeaders> {\n  const headerStore = await headers(); // eslint-disable-line\n\n  return {\n    nodeVersion: process.version,\n    nextVersion: getNextVersion(),\n    npmConfigUserAgent: process.env.npm_config_user_agent, // eslint-disable-line\n    userAgent: headerStore.get('User-Agent') ?? 'unknown user-agent',\n    port: process.env.PORT, // eslint-disable-line\n    host: headerStore.get('host') ?? 'unknown host',\n    xPort: headerStore.get('x-forwarded-port') ?? 'unknown x-forwarded-port',\n    xHost: headerStore.get('x-forwarded-host') ?? 'unknown x-forwarded-host',\n    xProtocol: headerStore.get('x-forwarded-proto') ?? 'unknown x-forwarded-proto',\n    xClerkAuthStatus: headerStore.get('x-clerk-auth-status') ?? 'unknown x-clerk-auth-status',\n    isCI: detectCIEnvironment(),\n  };\n}\n\n// Common CI environment variables\nconst CI_ENV_VARS = [\n  'CI',\n  'CONTINUOUS_INTEGRATION',\n  'BUILD_NUMBER',\n  'BUILD_ID',\n  'BUILDKITE',\n  'CIRCLECI',\n  'GITHUB_ACTIONS',\n  'GITLAB_CI',\n  'JENKINS_URL',\n  'TRAVIS',\n  'APPVEYOR',\n  'WERCKER',\n  'DRONE',\n  'CODESHIP',\n  'SEMAPHORE',\n  'SHIPPABLE',\n  'TEAMCITY_VERSION',\n  'BAMBOO_BUILDKEY',\n  'GO_PIPELINE_NAME',\n  'TF_BUILD',\n  'SYSTEM_TEAMFOUNDATIONCOLLECTIONURI',\n  'BITBUCKET_BUILD_NUMBER',\n  'HEROKU_TEST_RUN_ID',\n  'VERCEL',\n  'NETLIFY',\n];\n\n/**\n * Detects if the application is running in a CI environment\n */\nfunction detectCIEnvironment(): boolean {\n  const ciIndicators = CI_ENV_VARS;\n\n  const falsyValues = new Set<string>(['', 'false', '0', 'no']);\n\n  return ciIndicators.some(indicator => {\n    const value = process.env[indicator];\n    if (value === undefined) {\n      return false;\n    }\n\n    const normalizedValue = value.trim().toLowerCase();\n    return !falsyValues.has(normalizedValue);\n  });\n}\n\n/**\n * Extracts Next.js version from process title\n */\nfunction getNextVersion(): string | undefined {\n  try {\n    return process.title ?? 'unknown-process-title'; // 'next-server (v15.4.5)'\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * Converts metadata to HTTP headers\n */\nexport function formatMetadataHeaders(metadata: MetadataHeaders): Headers {\n  const headers = new Headers();\n\n  if (metadata.nodeVersion) {\n    headers.set('Clerk-Node-Version', metadata.nodeVersion);\n  }\n\n  if (metadata.nextVersion) {\n    headers.set('Clerk-Next-Version', metadata.nextVersion);\n  }\n\n  if (metadata.npmConfigUserAgent) {\n    headers.set('Clerk-NPM-Config-User-Agent', metadata.npmConfigUserAgent);\n  }\n\n  if (metadata.userAgent) {\n    headers.set('Clerk-Client-User-Agent', metadata.userAgent);\n  }\n\n  if (metadata.port) {\n    headers.set('Clerk-Node-Port', metadata.port);\n  }\n\n  if (metadata.host) {\n    headers.set('Clerk-Client-Host', metadata.host);\n  }\n\n  if (metadata.xPort) {\n    headers.set('Clerk-X-Port', metadata.xPort);\n  }\n\n  if (metadata.xHost) {\n    headers.set('Clerk-X-Host', metadata.xHost);\n  }\n\n  if (metadata.xProtocol) {\n    headers.set('Clerk-X-Protocol', metadata.xProtocol);\n  }\n\n  if (metadata.xClerkAuthStatus) {\n    headers.set('Clerk-Auth-Status', metadata.xClerkAuthStatus);\n  }\n\n  if (metadata.isCI) {\n    headers.set('Clerk-Is-CI', 'true');\n  }\n\n  return headers;\n}\n"],"mappings":"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","names":["headers"]}